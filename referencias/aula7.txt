Note that availability and latency are arguably the same thing: an unavailable system essentially provides extremely high latency. For purposes of this discussion, I consider systems with latencies larger than a typical request timeout, such as a few seconds, as unavailable, and latencies smaller than a request timeout, but still approaching hundreds of milliseconds, as “high latency.”
http://cs-www.cs.yale.edu/homes/dna/papers/abadi-pacelc.pdf

https://www.dicio.com.br/resiliencia/

https://microservices.io/patterns/reliability/circuit-breaker.html

https://pragprog.com/book/mnee/release-it
https://pragprog.com/book/mnee2/release-it-second-edition
https://media.pragprog.com/titles/mnee/toc.pdf

https://github.com/Netflix/Hystrix
https://github.com/Netflix/Hystrix/wiki/How-it-Works
https://raw.githubusercontent.com/wiki/Netflix/Hystrix/images/hystrix-command-flow-chart-640.png
https://raw.githubusercontent.com/wiki/Netflix/Hystrix/images/circuit-breaker-640.png

https://github.com/resilience4j/resilience4j

https://cloud.spring.io/spring-cloud-netflix/multi/multi__router_and_filter_zuul.html#hystrix-fallbacks-for-routes

https://spring.io/projects/spring-batch
https://docs.spring.io/spring-batch/3.0.x/reference/html/retry.html

https://pt.slideshare.net/IgorAnishchenko/pb-vs-thrift-vs-avro
https://grpc.io/docs/guides/concepts/

https://www.enterpriseintegrationpatterns.com/

https://www.enterpriseintegrationpatterns.com/patterns/messaging/PointToPointChannel.html
https://www.enterpriseintegrationpatterns.com/patterns/messaging/PublishSubscribeChannel.html
https://www.enterpriseintegrationpatterns.com/patterns/messaging/CompetingConsumers.html
https://www.enterpriseintegrationpatterns.com/patterns/messaging/RequestReply.html

https://www.eventstorming.com/
https://en.wikipedia.org/wiki/Event_storming



